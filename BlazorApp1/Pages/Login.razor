@page "/login"
@using BlazorApp1.Authentication
@using BlazorApp1.Services.Interfaces
@inject IUserAccountService userAccountService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navigationManager
@inject IJSRuntime js

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>Login</h3>
        </div>
        <div class="mb-3 text-center">
            <p>Credentials: test@test.com | test</p>
        </div>
        <div class="mb-3">
            <label>E-mail</label>
            <input @bind="model.Email" class="form-control" placeholder="E-mail ()" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" type="password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {
    private class Model
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    private Model model = new Model();

    private async Task Authenticate()
    {
        var userAccount = userAccountService.FindUserAccount(model.Email, model.Password);

        if (userAccount is null)
        {
            await js.InvokeVoidAsync("alert", "Invalid e-mail or password.");
            return;
        }

        var customAuthStateProvider = (StaticAuthenticationStateProvider)authStateProvider;

        await customAuthStateProvider.UpdateAuthenticationState(UserSessionEx.FromUserAccount(userAccount));

        navigationManager.NavigateTo("/fetchdata", true);
    }
}
